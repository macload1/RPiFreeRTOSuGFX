//~ #define SL_TIMESTAMP_TICKS_IN_10_MILLISECONDS     (10)
//~ #define SL_TIMESTAMP_MAX_VALUE                    (0xFFFFFFFF)


//~ /*!
    //~ \def        CPU_FREQ_IN_MHZ
    //~ \brief      Defines CPU frequency for Host side, for better accuracy of busy loops, if any
    //~ \sa
    //~ \note

    //~ \warning    If not set the default CPU frequency is set to 200MHz
                //~ This option will be deprecated in future release
 //~ */


//~ /*!
 //~ ******************************************************************************

    //~ \defgroup       configuration_capabilities        Configuration - Capabilities Set

    //~ This section IS NOT REQUIRED in case one of the following pre defined
    //~ capabilities set is in use:
    //~ - SL_TINY
    //~ - SL_SMALL
    //~ - SL_FULL

    //~ PORTING ACTION:
        //~ - Define one of the pre-defined capabilities set or uncomment the
          //~ relevant definitions below to select the required capabilities

    //~ @{

 //~ *******************************************************************************
 //~ */
//~ /*!
    //~ \def        SL_RUNTIME_EVENT_REGISTERATION

    //~ \brief      Defines whether the SimpleLink driver uses dynamic event registration
                //~ or static precompiled event mechanism
    //~ \sa

    //~ \note       belongs to \ref configuration_sec

 //~ */
//~ #define SL_RUNTIME_EVENT_REGISTERATION

//~ /*!
    //~ \def        SL_INC_ARG_CHECK

    //~ \brief      Defines whether the SimpleLink driver perform argument check
                //~ or not

                //~ When defined, the SimpleLink driver perform argument check on
                //~ function call. Removing this define could reduce some code
                //~ size and improve slightly the performances but may impact in
                //~ unpredictable behavior in case of invalid arguments

    //~ \sa

    //~ \note       belongs to \ref configuration_sec

    //~ \warning    Removing argument check may cause unpredictable behavior in
                //~ case of invalid arguments.
                //~ In this case the user is responsible to argument validity
                //~ (for example all handlers must not be NULL)
 //~ */
//~ #define SL_INC_ARG_CHECK

//~ /*!
    //~ \def        SL_INC_INTERNAL_ERRNO

    //~ \brief      Defines whether SimpleLink driver should employ it's internal errno
                //~ setter and getter to comply with BSD.
                //~ (Usually, this kind of mechanism should be handled by the OS).

                //~ When defined, the SimpleLink driver would set and manage the errno variable
                //~ per thread, to the various returned errors by the standard BSD API.
                //~ The BSD API includes the following functions:
                //~ socket, close, accept, bind, listen, connect, select,
                //~ setsockopt, getsockopt, recv, recvfrom, send, sendto,
                //~ gethostbyname. Furthermore, the user's application can read errno's value.
                //~ When not defined, user must provide an errno setter, such that the SimpleLink driver
                //~ would use the users's external errno meachnism to set an error code.

    //~ \sa         slcb_SetErrno

    //~ \note       belongs to \ref configuration_sec

    //~ \warning    Query errno in the user's application is by simply invoking the macro 'errno'
                //~ which returns a dereferenced pointer to the allocated calling thread's errno value.
                //~ If the user choose to change, write to or modifiy the value of errno in any way,
                //~ It might overwrite the errno value allocated to any other thread at the point in time.
                //~ (Once errno has been read, the driver assumes it can be allocated to another thread).
 //~ */

//~ #define SL_INC_INTERNAL_ERRNO

//~ /*!
    //~ \brief      Defines whether to include extended API in SimpleLink driver
                //~ or not

                //~ When defined, the SimpleLink driver will include also all
                //~ exteded API of the included packages

    //~ \sa         ext_api

    //~ \note       belongs to \ref configuration_sec

    //~ \warning
 //~ */
//~ #define SL_INC_EXT_API

//~ /*!
    //~ \brief      Defines whether to include WLAN package in SimpleLink driver
                //~ or not

                //~ When defined, the SimpleLink driver will include also
                //~ the WLAN package

    //~ \sa

    //~ \note       belongs to \ref configuration_sec

    //~ \warning
 //~ */
//~ #define SL_INC_WLAN_PKG

//~ /*!
    //~ \brief      Defines whether to include SOCKET package in SimpleLink
                //~ driver or not

                //~ When defined, the SimpleLink driver will include also
                //~ the SOCKET package

    //~ \sa

    //~ \note       belongs to \ref configuration_sec

    //~ \warning
 //~ */
//~ #define SL_INC_SOCKET_PKG

//~ /*!
    //~ \brief      Defines whether to include NET_APP package in SimpleLink
                //~ driver or not

                //~ When defined, the SimpleLink driver will include also the
                //~ NET_APP package

    //~ \sa

    //~ \note       belongs to \ref configuration_sec

    //~ \warning
 //~ */
//~ #define SL_INC_NET_APP_PKG

//~ /*!
    //~ \brief      Defines whether to include NET_CFG package in SimpleLink
                //~ driver or not

                //~ When defined, the SimpleLink driver will include also
                //~ the NET_CFG package

    //~ \sa

    //~ \note       belongs to \ref configuration_sec

    //~ \warning
 //~ */
//~ #define SL_INC_NET_CFG_PKG

//~ /*!
    //~ \brief      Defines whether to include NVMEM package in SimpleLink
                //~ driver or not

                //~ When defined, the SimpleLink driver will include also the
                //~ NVMEM package

    //~ \sa

    //~ \note       belongs to \ref configuration_sec

    //~ \warning
 //~ */
//~ #define SL_INC_NVMEM_PKG
//~ /*!
    //~ \brief      Defines whether to include NVMEM extended package in SimpleLink
                //~ driver or not

                //~ When defined, the SimpleLink driver will include also the
                //~ NVMEM extended package

    //~ \sa

    //~ \note       belongs to \ref nvmem_ext

    //~ \warning
 //~ */
//~ #define SL_INC_NVMEM_EXT_PKG

//~ /*!
    //~ \brief      Defines whether to include socket server side APIs
                //~ in SimpleLink driver or not

                //~ When defined, the SimpleLink driver will include also socket
                //~ server side APIs

    //~ \sa         server_side

    //~ \note

    //~ \warning
 //~ */
//~ #define SL_INC_SOCK_SERVER_SIDE_API

//~ /*!
    //~ \brief      Defines whether to include socket client side APIs in SimpleLink
                //~ driver or not

                //~ When defined, the SimpleLink driver will include also socket
                //~ client side APIs

    //~ \sa         client_side

    //~ \note       belongs to \ref configuration_sec

    //~ \warning
 //~ */
//~ #define SL_INC_SOCK_CLIENT_SIDE_API

//~ /*!
    //~ \brief      Defines whether to include socket receive APIs in SimpleLink
                //~ driver or not

                //~ When defined, the SimpleLink driver will include also socket
                //~ receive side APIs

    //~ \sa         recv_api

    //~ \note       belongs to \ref configuration_sec

    //~ \warning
 //~ */
//~ #define SL_INC_SOCK_RECV_API

//~ /*!
    //~ \brief      Defines whether to include socket send APIs in SimpleLink
                //~ driver or not

                //~ When defined, the SimpleLink driver will include also socket
                //~ send side APIs

    //~ \sa         send_api

    //~ \note       belongs to \ref configuration_sec

    //~ \warning
 //~ */
//~ #define SL_INC_SOCK_SEND_API

//~ /*!

   //~ Close the Doxygen group.
   //~ @}

 //~ */



















//~ /*!
    //~ \brief         register an interrupt handler routine for the host IRQ

    //~ \param         InterruptHdl    -    pointer to interrupt handler routine

    //~ \param         pValue            -    pointer to a memory structure that is passed
                                    //~ to the interrupt handler.

    //~ \return        upon successful registration, the function shall return 0.
                //~ Otherwise, -1 shall be returned

    //~ \sa

    //~ \note        If there is already registered interrupt handler, the function
                //~ should overwrite the old handler with the new one

    //~ \note       If the handler is a null pointer, the function should un-register the
                //~ interrupt handler, and the interrupts can be disabled.

    //~ \note       belongs to \ref configuration_sec

    //~ \warning
 //~ */
//~ #define sl_IfRegIntHdlr(InterruptHdl, \
                        //~ pValue)          NwpRegisterInterruptHandler( \
        //~ InterruptHdl, pValue)

//~ /*!
    //~ \brief         Masks the Host IRQ

    //~ \sa        sl_IfUnMaskIntHdlr



    //~ \note       belongs to \ref configuration_sec

    //~ \warning
 //~ */

//~ #define sl_IfMaskIntHdlr()

//~ /*!
    //~ \brief         Unmasks the Host IRQ

    //~ \sa        sl_IfMaskIntHdlr



    //~ \note       belongs to \ref configuration_sec

    //~ \warning
 //~ */

//~ #define sl_IfUnMaskIntHdlr()

//~ /*!
    //~ \brief         Write Handers for statistics debug on write

    //~ \param         interface handler    -    pointer to interrupt handler routine


    //~ \return        no return value

    //~ \sa

    //~ \note        An optional hooks for monitoring before and after write info

    //~ \note       belongs to \ref configuration_sec

    //~ \warning
 //~ */
//~ /*
   //~ #define SL_START_WRITE_STAT
 //~ */

//~ #ifdef SL_START_WRITE_STAT
//~ #define sl_IfStartWriteSequence
//~ #define sl_IfEndWriteSequence
//~ #endif

//~ /*!
    //~ \brief         Get the timer counter value (timestamp).
                //~ The timer must count from zero to its MAX value.

    //~ \param         None.


    //~ \return        Returns 32-bit timer counter value (ticks unit)

    //~ \sa

    //~ \note

    //~ \note       belongs to \ref porting_sec

    //~ \warning
 //~ */
//~ #ifndef SL_TINY_EXT
//~ #undef slcb_GetTimestamp
//~ /* A timer must be started before using this function */
//~ #define slcb_GetTimestamp           TimerGetCurrentTimestamp
//~ #endif

//~ /*!
    //~ \brief         This macro wait for the NWP to raise a ready for shutdown indication.

    //~ \param         None.

    //~ \note       This function is unique for the CC32XX family

    //~ \warning
 //~ */

//~ #define WAIT_NWP_SHUTDOWN_READY

//~ /*!
    //~ \brief      User's errno setter function. User must provide an errno setter
                //~ in order to let the SimpleLink Wi-Fi driver to support BSD API
                //~ alongside the user's errno mechanism.

    //~ \param      None.

    //~ \sa         SL_INC_INTERNAL_ERRNO

    //~ \note

    //~ \note       belongs to \ref porting_sec

    //~ \warning
 //~ */
//~ #ifndef SL_INC_INTERNAL_ERRNO
//~ #define slcb_SetErrno
//~ #endif

//~ /*!
   //~ Close the Doxygen group.
   //~ @}

 //~ */


//~ /*!
 //~ ******************************************************************************

    //~ \defgroup   configuration_mem_mgm             Configuration - Memory Management

    //~ This section declare in which memory management model the SimpleLink driver
    //~ will run:
        //~ -# Static
        //~ -# Dynamic

    //~ This section IS NOT REQUIRED in case Static model is selected.

    //~ The default memory model is Static


    //~ @{

 //~ *****************************************************************************
 //~ */

//~ /*!
    //~ \brief      Defines whether the SimpleLink driver is working in dynamic
                //~ memory model or not

                //~ When defined, the SimpleLink driver use dynamic allocations
                //~ if dynamic allocation is selected malloc and free functions
                //~ must be retrieved

    //~ \sa

    //~ \note       belongs to \ref configuration_sec

    //~ \warning
 //~ */
//~ /*
   //~ #define SL_MEMORY_MGMT_DYNAMIC     1
   //~ #define SL_MEMORY_MGMT_STATIC  0

   //~ #define SL_MEMORY_MGMT  SL_MEMORY_MGMT_DYNAMIC
 //~ */
//~ #ifdef SL_MEMORY_MGMT_DYNAMIC

//~ #ifdef SL_PLATFORM_MULTI_THREADED

//~ /*!
    //~ \brief
    //~ \sa
    //~ \note           belongs to \ref configuration_sec
    //~ \warning
 //~ */
//~ #define sl_Malloc(Size)                                 mem_Malloc(Size)

//~ /*!
    //~ \brief
    //~ \sa
    //~ \note           belongs to \ref configuration_sec
    //~ \warning
 //~ */
//~ #define sl_Free(pMem)                                   mem_Free(pMem)

//~ #else
//~ #include <stdlib.h>
//~ /*!
    //~ \brief
    //~ \sa
    //~ \note           belongs to \ref configuration_sec
    //~ \warning
 //~ */
//~ #define sl_Malloc(Size)                                 malloc(Size)

//~ /*!
    //~ \brief
    //~ \sa
    //~ \note           belongs to \ref configuration_sec
    //~ \warning
 //~ */
//~ #define sl_Free(pMem)                                   free(pMem)
//~ #endif

//~ #endif

//~ /*!

   //~ Close the Doxygen group.
   //~ @}

 //~ */

//~ /*!
 //~ ******************************************************************************

    //~ \defgroup       configuration_events      Configuration - Event Handlers

    //~ This section includes the asynchronous event handlers routines

    //~ porting ACTION:
        //~ -define your routine as the value of this handler

    //~ @{

 //~ ******************************************************************************
 //~ */

//~ /*!
    //~ \brief      Fatal Error async event for inspecting fatal error events.
                //~ This event handles events/errors reported from the device/host driver

    //~ \param[out]    pSlFatalErrorEvent

    //~ \par
             //~ Parameters:

             //~ - <b> slFatalErrorEvent->Id = SL_DEVICE_EVENT_FATAL_DEVICE_ABORT </b>,

             //~ - <b> slFatalErrorEvent->Id = SL_DEVICE_EVENT_FATAL_DRIVER_ABORT </b>,

             //~ - <b> slFatalErrorEvent->Id = SL_DEVICE_EVENT_FATAL_NO_CMD_ACK </b>,

             //~ - <b> slFatalErrorEvent->Id = SL_DEVICE_EVENT_FATAL_SYNC_LOSS </b>,

             //~ - <b> slFatalErrorEvent->Id = SL_DEVICE_EVENT_FATAL_CMD_TIMEOUT </b>,


    //~ \note       belongs to \ref configuration_sec

    //~ \warning
 //~ */

//~ #define slcb_DeviceFatalErrorEvtHdlr \
    //~ SimpleLinkFatalErrorEventHandler

//~ /*!
    //~ \brief      General async event for inspecting general events.
                //~ This event handles events/errors reported from the device/host driver
    //~ \sa

    //~ \note       belongs to \ref configuration_sec

    //~ \warning
 //~ */

//~ #define slcb_DeviceGeneralEvtHdlr          SimpleLinkGeneralEventHandler

//~ /*!
    //~ \brief WLAN Async event handler

    //~ \param[out]      pSlWlanEvent   pointer to SlWlanEvent_t data

    //~ \par
             //~ Parameters:

             //~ - <b>pSlWlanEvent->Event = SL_WLAN_CONNECT_EVENT </b>, STA or P2P client connection indication event
                 //~ - pSlWlanEvent->EventData.STAandP2PModeWlanConnected main fields:
                      //~ - ssid_name
                      //~ - ssid_len
                      //~ - bssid
                      //~ - go_peer_device_name
                      //~ - go_peer_device_name_len

             //~ - <b>pSlWlanEvent->Event = SL_WLAN_DISCONNECT_EVENT </b>, STA or P2P client disconnection event
                 //~ - pSlWlanEvent->EventData.STAandP2PModeDisconnected main fields:
                      //~ - ssid_name
                      //~ - ssid_len
                      //~ - reason_code

             //~ - <b>pSlWlanEvent->Event = SL_WLAN_STA_CONNECTED_EVENT </b>, AP/P2P(Go) connected STA/P2P(Client)
                  //~ - pSlWlanEvent->EventData.APModeStaConnected fields:
                      //~ - go_peer_device_name
                      //~ - mac
                      //~ - go_peer_device_name_len
                      //~ - wps_dev_password_id
                      //~ - own_ssid:  relevant for event sta-connected only
                      //~ - own_ssid_len:  relevant for event sta-connected only

             //~ - <b>pSlWlanEvent->Event = SL_WLAN_STA_DISCONNECTED_EVENT </b>, AP/P2P(Go) disconnected STA/P2P(Client)
                  //~ - pSlWlanEvent->EventData.APModestaDisconnected fields:
                      //~ - go_peer_device_name
                      //~ - mac
                      //~ - go_peer_device_name_len
                      //~ - wps_dev_password_id
                      //~ - own_ssid:  relevant for event sta-connected only
                      //~ - own_ssid_len:  relevant for event sta-connected only

             //~ - <b>pSlWlanEvent->Event = SL_WLAN_SMART_CONFIG_COMPLETE_EVENT </b>
                  //~ - pSlWlanEvent->EventData.smartConfigStartResponse fields:
                     //~ - status
                     //~ - ssid_len
                     //~ - ssid
                     //~ - private_token_len
                     //~ - private_token

             //~ - <b>pSlWlanEvent->Event = SL_WLAN_SMART_CONFIG_STOP_EVENT </b>
                     //~ - pSlWlanEvent->EventData.smartConfigStopResponse fields:
                         //~ - status

             //~ - <b>pSlWlanEvent->Event = SL_WLAN_P2P_DEV_FOUND_EVENT </b>
                     //~ - pSlWlanEvent->EventData.P2PModeDevFound fields:
                         //~ - go_peer_device_name
                         //~ - mac
                         //~ - go_peer_device_name_len
                         //~ - wps_dev_password_id
                         //~ - own_ssid:  relevant for event sta-connected only
                         //~ - own_ssid_len:  relevant for event sta-connected only

             //~ - <b>pSlWlanEvent->Event = SL_WLAN_P2P_NEG_REQ_RECEIVED_EVENT </b>
                      //~ - pSlWlanEvent->EventData.P2PModeNegReqReceived fields
                          //~ - go_peer_device_name
                          //~ - mac
                          //~ - go_peer_device_name_len
                          //~ - wps_dev_password_id
                          //~ - own_ssid:  relevant for event sta-connected only

             //~ - <b>pSlWlanEvent->Event = SL_WLAN_CONNECTION_FAILED_EVENT </b>, P2P only
                       //~ - pSlWlanEvent->EventData.P2PModewlanConnectionFailure fields:
                           //~ - status

    //~ \sa

    //~ \note           belongs to \ref configuration_sec

    //~ \warning
 //~ */

//~ #define slcb_WlanEvtHdlr                     SimpleLinkWlanEventHandler

//~ /*!
    //~ \brief NETAPP Async event handler

    //~ \param[out]      pSlNetApp   pointer to SlNetAppEvent_t data

    //~ \par
             //~ Parameters:
              //~ - <b>pSlWlanEvent->Event = SL_NETAPP_IPV4_IPACQUIRED_EVENT</b>, IPV4 acquired event
                  //~ - pSlWlanEvent->EventData.ipAcquiredV4 fields:
                       //~ - ip
                       //~ - gateway
                       //~ - dns

              //~ - <b>pSlWlanEvent->Event = SL_NETAPP_IP_LEASED_EVENT</b>, AP or P2P go dhcp lease event
                  //~ - pSlWlanEvent->EventData.ipLeased  fields:
                       //~ - ip_address
                       //~ - lease_time
                       //~ - mac

              //~ - <b>pSlWlanEvent->Event = SL_NETAPP_IP_RELEASED_EVENT</b>, AP or P2P go dhcp ip release event
                   //~ - pSlWlanEvent->EventData.ipReleased fields
                       //~ - ip_address
                       //~ - mac
                       //~ - reason


    //~ \sa

    //~ \note           belongs to \ref configuration_sec

    //~ \warning
 //~ */

//~ #define slcb_NetAppEvtHdlr                      SimpleLinkNetAppEventHandler

//~ /*!
    //~ \brief HTTP server async event

    //~ \param[out] pSlHttpServerEvent   pointer to SlHttpServerEvent_t
    //~ \param[in] pSlHttpServerResponse pointer to SlHttpServerResponse_t

    //~ \par
          //~ Parameters: \n

          //~ - <b>pSlHttpServerEvent->Event = SL_NETAPP_HTTPGETTOKENVALUE_EVENT</b>
             //~ - pSlHttpServerEvent->EventData fields:
                 //~ - httpTokenName
                     //~ - data
                     //~ - len
             //~ - pSlHttpServerResponse->ResponseData fields:
                     //~ - data
                     //~ - len

          //~ - <b>pSlHttpServerEvent->Event = SL_NETAPP_HTTPPOSTTOKENVALUE_EVENT</b>
              //~ - pSlHttpServerEvent->EventData.httpPostData fields:
                     //~ - action
                     //~ - token_name
                     //~ - token_value
              //~ - pSlHttpServerResponse->ResponseData fields:
                     //~ - data
                     //~ - len


    //~ \sa

    //~ \note           belongs to \ref configuration_sec

    //~ \warning
 //~ */

//~ #define slcb_NetAppHttpServerHdlr   SimpleLinkHttpServerEventHandler

//~ /*!
    //~ \brief          A handler for handling Netapp requests.
                    //~ Netapp request types:
                    //~ For HTTP server: GET / POST (future: PUT / DELETE)

    //~ \param

    //~ \param

    //~ \sa

    //~ \note           belongs to \ref porting_sec

    //~ \warning
 //~ */

//~ #define slcb_NetAppRequestHdlr  SimpleLinkNetAppRequestEventHandler

//~ /*!
    //~ \brief          A handler for freeing the memory of the NetApp response.

    //~ \param

    //~ \param

    //~ \sa

    //~ \note           belongs to \ref porting_sec

    //~ \warning
 //~ */

//~ #define slcb_NetAppRequestMemFree  SimpleLinkNetAppRequestMemFreeEventHandler

//~ /*!
    //~ \brief Socket Async event handler

    //~ \param[out]      pSlSockEvent   pointer to SlSockEvent_t data

    //~ \par
             //~ Parameters:\n
             //~ - <b>pSlSockEvent->Event = SL_SOCKET_TX_FAILED_EVENT</b>
                 //~ - pSlSockEvent->EventData fields:
                     //~ - sd
                     //~ - status
             //~ - <b>pSlSockEvent->Event = SL_SOCKET_ASYNC_EVENT</b>
                //~ - pSlSockEvent->EventData fields:
                     //~ - sd
                     //~ - type: SSL_ACCEPT  or RX_FRAGMENTATION_TOO_BIG or OTHER_SIDE_CLOSE_SSL_DATA_NOT_ENCRYPTED
                     //~ - val

    //~ \sa

    //~ \note           belongs to \ref configuration_sec

    //~ \warning
 //~ */

//~ #define slcb_SockEvtHdlr         SimpleLinkSockEventHandler

//~ /*!
    //~ \brief Trigger Async event handler. If define, sl_Select operates only in trigger mode.
                           //~ To disable trigger mode, handler should not be defined.

    //~ \param[out]      pSlTriggerEvent   pointer to SlSockTriggerEvent_t data

    //~ \par
             //~ Parameters:\n
             //~ - <b>pSlTriggerEvent->Event = SL_SOCKET_TRIGGER_EVENT_SELECT</b>
             //~ - pSlTriggerEvent->EventData: Not in use


    //~ \sa

    //~ \note           belongs to \ref configuration_sec

    //~ \warning
 //~ */
//~ #ifndef SL_PLATFORM_MULTI_THREADED
//~ #define slcb_SocketTriggerEventHandler SimpleLinkSocketTriggerEventHandler
//~ #endif
//~ /*!

   //~ Close the Doxygen group.
   //~ @}

 //~ */
